<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <link rel="stylesheet" href="/css/chat.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <div id="chat-container">
        <h1>Chat</h1>
        <div id="messages"></div>
        <form id="chat-form">
            <input type="text" id="message" placeholder="Escribe tu mensaje aquí..." autocomplete="off">
            <button type="submit">Enviar</button>
        </form>
    </div>
    <script>
        const socket = io();
        const messagesDiv = document.getElementById('messages');
        const chatForm = document.getElementById('chat-form');
        const messageInput = document.getElementById('message');

        // Enviar un nuevo mensaje
        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const message = messageInput.value;
            if (message.trim() !== '') {
                socket.emit('chatMessage', message);
                messageInput.value = '';
            }
        });

        // Recibir y mostrar mensajes
        socket.on('message', (message) => {
            const messageElement = document.createElement('div');
            messageElement.textContent = `${message.user}: ${message.message}`; // Aquí cambiamos a 'message.message'
            messagesDiv.appendChild(messageElement);
        });

        // Cargar mensajes antiguos
        fetch('/api/mensajes')
            .then(response => response.json())
            .then(messages => {
                messages.forEach(message => {
                    const messageElement = document.createElement('div');
                    messageElement.textContent = `${message.user}: ${message.message}`; // Aquí cambiamos a 'message.message'
                    messagesDiv.appendChild(messageElement);
                });
            });
    </script>
</body>

</html>
